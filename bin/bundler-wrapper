#!/usr/bin/env ruby
# 
# Copyright (c) 2015 Solano Labs All Rights Reserved
#

require 'shellwords'

module BundlerWrapper
  class BundlerWrapper
    MAX_RERUNS = 5

    def self.invoke(argv)
      env = ENV.to_hash.dup

      reruns = 0

      while reruns < MAX_RERUNS do
        status, rerun = run_bundler(env, argv)
        if status == 0 || !rerun then
          exit(status)
        end
        $stdout.puts "NOTICE: automatically retrying bundle command..."
        reruns += 1
        Kernel.sleep(2+10*rand())
      end
      exit(255)
    end

    ERROR_MESSAGES = [
      'Gem::RemoteFetcher::FetchError:',
      'Errno::ETIMEDOUT:',
      'Errno::ECONNRESET:',
      'Connection timed out - connect(2)'
    ]

    def self.run_bundler(env, argv)
      path = ENV['PATH'] || "/bin:/usr/bin:/sbin:/usr/sbin"
      path = path.split(':')
      bundle = nil
      path.each do |p|
        if File.exists?(File.join(p, 'bundle')) then
          bundle = File.join(p, 'bundle')
          break
        end
      end

      if argv.length < 1 || argv[0] != 'install' then
        env.each_pair do |k, v|
          ENV[k.to_s] = v.to_s
        end
        argv.unshift(bundle)
        Kernel.exec(*argv)
        Kernel.exit!(255)
      end

      status, rerun = 255, false
      argv.unshift(bundle)
      cmd = Shellwords.join(argv)
      cmd += " 2>&1"
      IO.popen(cmd, "r") do |oe|
        oe.each_line do |line|
          $stdout.puts line
          $stdout.flush
          ERROR_MESSAGES.each do |error_message|
            if line.include?(error_message) then
              rerun = true
            end
          end
        end

        oe.close
      end

      status = $?
      return [status.exitstatus, rerun]
    end
  end
end

BundlerWrapper::BundlerWrapper.invoke(ARGV)
